#!/usr/bin/env node

/**
 * Module dependencies.
 */
let fileController = require('../controllers/files')
var app = require('../app')
var debug = require('debug')('http-listener:server')
var http = require('http')
var WebSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
// var io     = app.io
// io.attach( server );
// io.set('heartbeat timeout', 2000000)
// io.set('heartbeat interval', 5000)
// io.disable('heartbeats');
// io.set('heartbeat', false)
server.listen(port)
server.timeout = 500000
server.on('error', onError)
server.on('listening', onListening)

let wsServer = new WebSocketServer({
  httpServer: server,
  // You should not use autoAcceptConnections for production
  // applications, as it defeats all standard cross-origin protection
  // facilities built into the protocol and the browser.  You should
  // *always* verify the connection's origin and decide whether or not
  // to accept it.
  keepalive: false,
  maxReceivedMessageSize: 100 * 1024 *1024,
  autoAcceptConnections: false
});


function originIsAllowed(origin) {
  // put logic here to detect whether the specified origin is allowed.
  return true;
}

wsServer.on('request', function(request) {
  // console.log('request is : ', request)
  // let connection = request.accept(request.origin, request.cookies)
  if (!originIsAllowed(request.origin)) {
    // Make sure we only accept requests from an allowed origin
    request.reject();
    console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
    return;
  }

  var connection = request.accept('echo-protocol', request.origin);
  console.log((new Date()) + ' Connection accepted.');
  connection.on('message', function(message) {
    // console.log('message is : ', message)
    if (message.type === 'utf8') {
      console.log('Received Message: ' + message.utf8Data);
      fileController.processAndSaveFile(connection, message)
    }
    else if (message.type === 'binary') {
      console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
      console.log('data is : ', message.binaryData.toString())
      connection.sendUTF(JSON.stringify({fileLength: message.binaryData.length}))
    }
  });
  connection.on('close', function(reasonCode, description) {
    console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
  });
})

global.wsServer = wsServer
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
